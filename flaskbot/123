from flask import Flask, render_template, request, jsonify
import requests

app = Flask(__name__)

GEMINI_API_KEY = "AIzaSyBuNwU-eLLiV4yjItYTPHclCihoSAf3ppc"
GEMINI_ENDPOINT = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash :generateContent?key={GEMINI_API_KEY}"

@app.route("/")
def home():
    return render_template("chat.html")

@app.route("/chat", methods=["POST"])
def chat():
    user_input = request.json.get("message", "")

    if not user_input:
        return jsonify({"error": "No message provided"}), 400

    law_prompt = """
    You are a legal expert specializing in Indian law.  
    Answer user queries based on judiciary laws, IPC (Indian Penal Code), CRPC, and legal rights.  
    Ensure your responses are factually accurate, concise, and relevant to the question.  

    Support multilingual queries and responses, including but not limited to English, Hindi, Tamil, Telugu, Kannada, Malayalam, Marathi, Bengali, Gujarati, and Urdu.  
    Detect the user's language and provide responses accordingly, ensuring clarity and legal accuracy in the respective language.  

    Format your response as markdown with bullet points for each key point.
    """

    payload = {
        "contents": [{"parts": [{"text": f"{law_prompt}\n\nUser: {user_input}\n\nAI:"}]}]
    }

    headers = {"Content-Type": "application/json"}

    response = requests.post(GEMINI_ENDPOINT, json=payload, headers=headers)

    if response.status_code == 200:
        try:
            reply = response.json()["candidates"][0]["content"]["parts"][0]["text"]

            # Process the reply to ensure it is formatted as markdown with bullet points
            formatted_reply = process_markdown(reply)

            return jsonify({"reply": formatted_reply})
        except KeyError:
            return jsonify({"error": "Invalid response format"}), 500
    else:
        return jsonify({"error": "API request failed"}), response.status_code


def process_markdown(text):
    """
    Processes the raw text into a markdown-formatted string with bullet points.
    Each key point is displayed as a bullet point, and sentences are separated by line breaks.
    """
    # Split the text into lines
    lines = text.split(". ")

    # Add bullet points to each line
    bullet_points = [f"- {line.strip()}." for line in lines if line.strip()]

    # Join the bullet points with line breaks
    formatted_text = "\n".join(bullet_points)

    # Add additional formatting if needed (e.g., bold headers)
    formatted_text = f"**Response:**\n{formatted_text}"

    return formatted_text


if __name__ == "__main__":
    app.run(debug=True, port=3000)